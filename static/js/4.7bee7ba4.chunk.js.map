{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","src","img","alt","to","name","Message","message","TextAreaSchema","Yup","shape","min","max","required","TextMessageForm","initialValues","validationSchema","onSubmit","values","setSubmitting","resetForm","form","component","Textarea","type","placeholder","disabled","isSubmitting","Dialogs","dialogElements","dialogsPage","dialogs","map","messageElements","messages","dialogsItems","sendMessage","connector","connect","state","isAuth","userAuth","compose","dispatch","sendMessageActionCreator","Component"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,yBAAyB,IAAM,uB,qFCenOC,EAbI,SAACC,GAClB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACE,mCACE,sBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,OAAnC,UACE,qBAAKC,IAAKP,EAAMQ,IAAKC,IAAI,GAAGN,UAAWC,IAAEI,MACzC,eAAC,IAAD,CAASE,GAAIT,EAAb,cAAqBD,EAAMW,cCJpBC,EAJC,SAACZ,GACf,OAAO,qBAAKG,UAAWC,IAAES,QAAlB,SAA4Bb,EAAMa,W,+BCerCC,EAAiBC,MAAaC,MAAM,CACxCH,QAASE,MACNE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,cAGRC,EAAkB,SAACpB,GACvB,OACE,mCACE,cAAC,IAAD,CACEqB,cAAe,CAAER,QAAS,IAC1BS,iBAAkBR,EAClBS,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClC1B,EAAMuB,SAASC,EAAOX,SACtBY,GAAc,GACdC,KANJ,SASG,SAACC,GACA,OACE,eAAC,IAAD,WACE,cAAC,IAAD,CACEC,UAAWC,IACXC,KAAK,UACLnB,KAAK,UACLoB,YAAa,uBAEf,8BACE,wBAAQD,KAAK,SAASE,SAAUL,EAAKM,aAArC,qCAqCDC,EAzBC,SAAClC,GACf,IAAImC,EAAiBnC,EAAMoC,YAAYC,QAAQC,KAAI,SAACjC,GAAD,OACjD,cAAC,EAAD,CACEM,KAAMN,EAAOM,KAEbT,GAAIG,EAAOH,GACXM,IAAKH,EAAOG,KAFPH,EAAOH,OAMZqC,EAAkBvC,EAAMoC,YAAYI,SAASF,KAAI,SAACzB,GAAD,OACnD,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQX,OAGlD,OACE,sBAAKC,UAAWC,IAAEiC,QAAlB,UACE,qBAAKlC,UAAWC,IAAEqC,aAAlB,SAAiCN,IACjC,sBAAKhC,UAAWC,IAAEoC,SAAlB,UACGD,EACD,cAAC,EAAD,CAAiBhB,SAAUvB,EAAM0C,qB,sBCrEnCC,EAAYC,aAJe,SAACC,GAAD,MAAmB,CAClDC,OAAQD,EAAME,SAASD,W,YCeVE,4BAKbJ,aAlBoB,SAACC,GACrB,MAAO,CACLT,YAAaS,EAAMT,gBAGE,SAACa,GACxB,MAAO,CACLP,YAAa,SAAC7B,GACZoC,EAASC,YAAyBrC,UDLjC,SACLsC,GAUA,OAAOR,GARoD,SAAC3C,GAC1D,OAAKA,EAAM8C,OAGJ,cAACK,EAAD,eAAenD,IAFb,cAAC,IAAD,CAAUU,GAAI,gBCKZsC,CAObd","file":"static/js/4.7bee7ba4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\",\"img\":\"Dialogs_img__3Kx2a\"};","import { NavLink } from \"react-router-dom\";\nimport s from \"./../Dialogs.module.css\";\n\nconst DialogItem = (props: { name: string; id: number; img: string }) => {\n  let path = \"/dialogs/\" + props.id;\n\n  return (\n    <>\n      <div className={s.dialog + \" \" + s.active}>\n        <img src={props.img} alt=\"\" className={s.img} />\n        <NavLink to={path}> {props.name}</NavLink>\n      </div>\n    </>\n  );\n};\n\nexport default DialogItem;\n","import s from \"./../Dialogs.module.css\";\n\nconst Message = (props: { message: string }) => {\n  return <div className={s.message}>{props.message}</div>;\n};\n\nexport default Message;\n","import s from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport React from \"react\";\nimport { State } from \"../../redux/redux-store\";\nimport { Field, Form, Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Textarea } from \"../common/FormControls/FormControls\";\n\nexport interface DialogProps {\n  sendMessage: (message: string) => void;\n  dialogsPage: State[\"dialogsPage\"];\n}\n\ninterface Values {\n  message: string;\n}\n\nconst TextAreaSchema = Yup.object().shape({\n  message: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(50, \"Too Long!\")\n    .required(\"Required\"),\n});\n\nconst TextMessageForm = (props: { onSubmit: (message: string) => void }) => {\n  return (\n    <>\n      <Formik<Values>\n        initialValues={{ message: \"\" }}\n        validationSchema={TextAreaSchema}\n        onSubmit={(values, { setSubmitting, resetForm }) => {\n          props.onSubmit(values.message);\n          setSubmitting(false);\n          resetForm();\n        }}\n      >\n        {(form) => {\n          return (\n            <Form>\n              <Field\n                component={Textarea}\n                type=\"message\"\n                name=\"message\"\n                placeholder={\"Enter your message\"}\n              />\n              <div>\n                <button type=\"submit\" disabled={form.isSubmitting}>\n                  Send Message\n                </button>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </>\n  );\n};\n\nconst Dialogs = (props: DialogProps) => {\n  let dialogElements = props.dialogsPage.dialogs.map((dialog) => (\n    <DialogItem\n      name={dialog.name}\n      key={dialog.id}\n      id={dialog.id}\n      img={dialog.img}\n    />\n  ));\n\n  let messageElements = props.dialogsPage.messages.map((message) => (\n    <Message message={message.message} key={message.id} />\n  ));\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>{dialogElements}</div>\n      <div className={s.messages}>\n        {messageElements}\n        <TextMessageForm onSubmit={props.sendMessage} />\n      </div>\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React, { ComponentType, FC } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { State } from \"../../redux/redux-store\";\nimport { connect } from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state: State) => ({\n  isAuth: state.userAuth.isAuth,\n});\n\nconst connector = connect(mapStateToPropsForRedirect);\n\nexport function withAuthRedirect<Props extends {}>(\n  Component: ComponentType<Props>\n): ComponentType<Props> {\n  const RedirectComponent: FC<Props & { isAuth: boolean }> = (props) => {\n    if (!props.isAuth) {\n      return <Redirect to={\"/login\"} />;\n    }\n    return <Component {...props} />;\n  };\n\n  // @ts-ignore It's impossible to type it correctly\n  return connector(RedirectComponent);\n}\n","import { sendMessageActionCreator } from \"../../redux/dialogs-reducer\";\nimport Dialogs, { DialogProps } from \"./Dialogs\";\nimport { Dispatch, State } from \"../../redux/redux-store\";\nimport { connect } from \"react-redux\";\nimport { withAuthRedirect } from \"../hoc/withAuthRedirect\";\nimport { compose } from \"redux\";\nimport { ComponentType } from \"react\";\n\nlet mapStateToProps = (state: State) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  };\n};\nlet mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    sendMessage: (message: string) => {\n      dispatch(sendMessageActionCreator(message));\n    },\n  };\n};\n\nexport default compose<\n  ComponentType<DialogProps>,\n  ComponentType<DialogProps>,\n  ComponentType<{}>\n>(\n  connect(mapStateToProps, mapDispatchToProps),\n  withAuthRedirect\n)(Dialogs);\n"],"sourceRoot":""}